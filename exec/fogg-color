#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile" source normalize

  local nm_region="$(jq -r '.provider.aws.region' terraform.tf.json 2>/dev/null || true)"
  if [[ -n "$nm_region" ]]; then
    export AWS_DEFAULT_REGION="$nm_region"
  fi

  case "${1:-}" in
    */)
      local pth_service="$1"; shift
      cd "$pth_service"
      ;;
  esac

  local nm_color="${BASH_SOURCE##*-}"
  local nm_asg="$(fogg name | cut -d/ -f1,4-5 | perl -pe 's{/}{-}g')-${nm_color}"

  if [[ -z "$nm_asg" ]]; then
    echo "ERROR: no asg group matching color $nm_color" 1>&2
    return 1
  fi

  case "${1:-}" in
    "")
      local tmp_asg="$(mktemp -t XXXXXX)"
      local tmp_instances="$(mktemp -t XXXXXX)"
      fogg "$nm_color" asg '\(.AutoScalingGroupName) min:\(.MinSize) desired:\(.DesiredCapacity) max:\(.MaxSize)' > "$tmp_asg" &
      fogg "$nm_color" instances '\(.InstanceId) \(.PrivateIpAddress) \(.PublicIpAddress//"")' > "$tmp_instances" &
      wait
      cat "$tmp_asg"
      cat "$tmp_instances"
      rm -f "$tmp_asg" "$tmp_instances"
      ;;

    ssh)
      shift # ssh
      ssh "$(fogg "$nm_color" instances '\(.PrivateIpAddress)' | awk 'NR == 1 {print $1}')" "$@"
      ;;

    asg)
      shift # asg
      local jq_refine="${1:-\(.AutoScalingGroupName) min:\(.MinSize) desired:\(.DesiredCapacity) max:\(.MaxSize)}"
      aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$nm_asg" | jq '.AutoScalingGroups' | jq 'map("'"$jq_refine"'")' | jq -r '.[]'
      ;;

    instances)
      shift # instances
      local jq_refine="${1:-\(.InstanceId) \(.PrivateIpAddress)}"
      fogg "$nm_color" asg '\(.)' | jq -r '.Instances[] | "\(.InstanceId) \(.LifecycleState) \(.HealthStatus)"' | while read -r instance_id lifecycle health; do
        echo "$(echo "$instance_id" | gxargs -r aws ec2 describe-instances --instance-ids | jq '[.Reservations[].Instances[]]' | jq 'map("'"$jq_refine"'")' | jq -r '.[]')" "$lifecycle" "$health"
      done
      ;;

    inc|dec|desired)
      local asg_cmd="$1"; shift
      local inc_by="${1:-1}"

      local cnt_desired=
      
      case "$asg_cmd" in
        inc)
          cnt_desired="$(( $(fogg "$nm_color" asg '\(.DesiredCapacity)') + inc_by ))"
          ;;
        dec)
          cnt_desired="$(( $(fogg "$nm_color" asg '\(.DesiredCapacity)') - inc_by ))"
          ;;
        desired)
          cnt_desired="${inc_by}"
          ;;
      esac

      aws autoscaling set-desired-capacity --auto-scaling-group-name "$nm_asg" --desired-capacity "$cnt_desired"
      ;;

    remove)
      shift # remove
      runmany 'aws autoscaling terminate-instance-in-auto-scaling-group --instance-id "$1" --should-decrement-desired-capacity' "$@"
      ;;

    reset)
      shift # reset
      fogg "$nm_color" instances | awk '{print $1}' | xargs fogg "$nm_color" replace
      ;;

    replace)
      shift # replace
      if [[ "$#" -gt 0 ]]; then
        runmany 'aws autoscaling terminate-instance-in-auto-scaling-group --instance-id "$1" --no-should-decrement-desired-capacity' "$@"
      fi
      ;;

    detach)
      shift # detach
      aws autoscaling detach-instances --auto-scaling-group-name "$nm_asg" --instance-ids "$@" --should-decrement-desired-capacity
      ;;

    detached)
      shift # detached
      fogg "$nm_color" detach "$@"
      while true; do
        local cnt_attached="$(aws autoscaling describe-auto-scaling-instances --instance-ids xxx "$@" | jq -r '.AutoScalingInstances[] | length')"
        if [[ -z "$cnt_attached" || "$cnt_attached" == 0 ]]; then
          break
        fi
        echo "INFO: $(aws autoscaling describe-auto-scaling-instances --instance-ids xxx "$@" | jq -r '.AutoScalingInstances[] | "\(.LifecycleState) \(.HealthStatus)"') $(date)"
        sleep 1
      done
      ;;

    attached)
      shift # attached
      fogg "$nm_color" attach "$@"
      while true; do
        local cnt_attached="$(aws autoscaling describe-auto-scaling-instances --instance-ids xxx "$@" | jq -r '.AutoScalingInstances[] | length')"
        if [[ "$cnt_attached" -ge "$#" ]]; then
          if [[ "$(aws autoscaling describe-auto-scaling-instances --instance-ids xxx "$@" | jq -r '.AutoScalingInstances[] | "\(.LifecycleState) \(.HealthStatus)"')" == "InService HEALTHY" ]]; then
            break
          fi
        fi
        echo "INFO: $(aws autoscaling describe-auto-scaling-instances --instance-ids xxx "$@" | jq -r '.AutoScalingInstances[] | "\(.LifecycleState) \(.HealthStatus)"') $(date)"
        sleep 1
      done
      ;;

     attach)
      shift # attach
      aws autoscaling attach-instances --auto-scaling-group-name "$nm_asg" --instance-ids "$@"
      ;;

    receive-message)
      shift # receive-message
      local url_sqs="$(terraform output -json | jq -r --arg color "$nm_color" '.service_sqs.value | map(select(test("-\($color)$")))[0]')"
      if [[ "$#" == 0 ]]; then
        set -- .
      fi
      aws sqs receive-message --queue-url "$url_sqs" --max-number-of-messages 1 | jq -r '.Messages[] | { ReceiptHandle: .ReceiptHandle, Message: .Body | fromjson | .Message | fromjson }' | jq -r "$@"
      ;;

    delete-message)
      shift # delete-message
      export url_sqs="$(terraform output -json | jq -r --arg color "$nm_color" '.service_sqs.value | map(select(test("-\($color)$")))[0]')"
      runmany 'aws sqs delete-message --queue-url "$url_sqs" --receipt-handle "$1"' "$@"
      ;;

    queue-attributes)
      shift # queue-attributes
      local url_sqs="$(terraform output -json | jq -r --arg color "$nm_color" '.service_sqs.value | map(select(test("-\($color)$")))[0]')"
      if [[ "$#" == 0 ]]; then
        set -- .
      fi
      aws sqs get-queue-attributes --attribute-names All --queue-url "$url_sqs" | jq -r "$@"
      ;;

    deploy-worker)
      while true; do 
        fogg "$nm_color" deploy-once
        date; sleep 5
      done
      ;;

    deploy-once)
      fogg "$nm_color" receive-message \
        | jq -r -s 'map(select(.Message.Event == "autoscaling:EC2_INSTANCE_LAUNCH" and .Message.Details["Subnet ID"])) | map("\(.Message.AutoScalingGroupARN | split("/")[-1] | split("-")[-1]) \(.Message.EC2InstanceId) \(.ReceiptHandle)") | .[]' \
        | runmany 1 3 'deploy $1 -l $2; fogg $1 delete-message "$3"' 
      ;;

    *)
      echo "ERROR: no subcommand found for fogg $nm_color $1" 1>&2
      return 1
      ;;
  esac
}

source sub "$BASH_SOURCE" "$@"
