#!/usr/bin/env bash

function use_module {
  local nm_module="$1"; shift
  hcltool "$shome/module/${nm_module}/variables.tf" \
    | jq --arg tfmod "$nm_module" '{
          variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
          output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
        }'
}

function gen_state {
  local remote_bucket="$(hcltool _terraform.tf.json  | jq -r '.variable.remote_bucket.default')"
  local remote_path="$(hcltool _terraform.tf.json  | jq -r '.variable.remote_path.default')"
  local remote_region="$(hcltool _terraform.tf.json  | jq -r '.variable.remote_region.default')"
  local provider_region="$(hcltool terraform.tfvars  | jq -r '.region')"
  if [[ -z "$provider_region" ]]; then
    provider_region="$remote_region"
  fi

	jq \
		--arg remote_bucket "$remote_bucket" \
		--arg remote_path "$remote_path" \
		--arg remote_region "$remote_region" \
		--arg provider_region "$provider_region" \
    -n -r '"terraform { backend \"s3\" { lock_table=\"terraform_state_lock\" bucket=\"\($remote_bucket)\" key=\"\($remote_path)\" region=\"\($remote_region)\" } }\nprovider \"aws\" { region=\"\($provider_region)\" }\nprovider \"digitalocean\" { }\n"'
}

function gen_org { 
  local nm_module="$1"; shift
  gen_xxx "$nm_module"
}

function gen_env { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_peering_net_stag_prod { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_app {
  local nm_module="$1"; shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_service {
  local nm_module="$1"; shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_instance { 
  local nm_module="$1"; shift
  shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_xxx {
  local nm_module="$1"; shift
  (
    hcltool "$shome/common/${nm_module}.tf" 
    hcltool "$shome/module/${nm_module}/variables.tf" | jq 'reduce (.variable | to_entries)[] as $ele ({}; .[$ele.key] = ($ele.value.default | if (. | type) == "array" then [ "${var.\($ele.key)}" ] else "${var.\($ele.key)}" end))' | jq --arg m "$nm_module" '{ module: { "\($m)": . } }'
  ) | merge_map
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  gen \
    <("gen_${BASH_SOURCE[2]##*-}" "${BASH_SOURCE[2]##*-}" "$@") \
    <(use_module "${BASH_SOURCE[2]##*-}") \
    "$@" | jq -S . > terraform.tf.json.1
  mv terraform.tf.json.1 _terraform.tf.json

  gen_state > state.tf.1
  mv state.tf.1 state.tf
  hcltool state.tf > state.tf.json.1
  mv state.tf.json.1 state.tf.json

  cat _terraform.tf.json state.tf.json | merge_map > terraform.tf.json.1
  mv terraform.tf.json.1 terraform.tf.json

  rm -f state.tf.json state.tf _terraform.tf.json
}

_main "$@"
