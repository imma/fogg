#!/usr/bin/env bash

function use_module {
  local nm_module="$1"; shift
  hcltool "$shome/module/${nm_module}/variables.tf" \
    | jq --arg tfmod "$nm_module" '{
          variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
          output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
        }'
}

function gen_state {
	jq \
		--arg remote_bucket "$remote_bucket" \
		--arg remote_path "$remote_path" \
		--arg remote_region "$remote_region" \
		--arg provider_region "$region" \
    -n -r '{ 
        provider:
        { aws: { region: "\($provider_region)" },
          digitalocean: {}
        },
        terraform: 
        { backend: 
          { s3: 
            { bucket: "\($remote_bucket)", 
              key: "\($remote_path)", 
              dynamodb_table: "terraform_state_lock", 
              region: "\($remote_region)" 
            } 
          } 
        }
      }'
}

function gen_org { 
  local nm_module="$1"; shift
  gen_xxx "$nm_module"
}

function gen_env { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_peering_net_stag_prod { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_app {
  local nm_module="$1"; shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_service {
  local nm_module="$1"; shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_instance { 
  local nm_module="$1"; shift
  shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_xxx {
  local nm_module="$1"; shift
  (
    hcltool "$shome/common/${nm_module}.tf" 
    hcltool "$shome/module/${nm_module}/variables.tf" | jq 'reduce (.variable | to_entries)[] as $ele ({}; .[$ele.key] = ($ele.value.default | if (. | type) == "array" then [ "${var.\($ele.key)}" ] else "${var.\($ele.key)}" end))' | jq --arg m "$nm_module" '{ module: { "\($m)": . } }'
  ) | merge_map
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  local id_credstash_tfvars="$(pwd -P | perl -pe 's{^.*?/(org/.*)}{$1}; s{/}{--}g')/terraform.tfvars"
  local id_credstash_env="$(echo "$(pwd -P | perl -pe 's{^.*?/(org/[^/]+(/[^/]+)?).*?$}{$1}; s{/}{--}g')")"
  local id_credstash_org="$(echo "$(pwd -P | perl -pe 's{^.*?/(org/[^/]+).*?$}{$1}; s{/}{--}g')")"

  local tmp_org="$(mktemp -t XXXXXX)"
  local tmp_env="$(mktemp -t XXXXXX)"
  local tmp_tfvars="$(mktemp -t XXXXXX)"
  trap "$(printf 'rm -f %q %q %q' "$tmp_org" "$tmp_env" "$tmp_tfvars")" EXIT

  credstash get "$id_credstash_org" > "$tmp_org" &
  credstash get "$id_credstash_env" > "$tmp_env" &
  credstash get "$id_credstash_tfvars" > "$tmp_tfvars" &
  wait

  local remote_path="$(pwd -P | perl -pe 's{^.*?/org/(.*)}{$1}; s{/instances/}{/}; s{/}{_}g')/terraform.tfstate"
  local remote_bucket="$(jq -r '.remote_bucket' "$tmp_org")"
  local remote_region="$(jq -r '.remote_region' "$tmp_org")"

  local region="$(jq -r '.region' "$tmp_env")"
  local az_count="$(jq -r '.az_count' "$tmp_env")"
  local want_nat="$(jq -r '.want_nat' "$tmp_env")"

  { gen \
      <("gen_${BASH_SOURCE[2]##*-}" "${BASH_SOURCE[2]##*-}" "$@") \
      <(use_module "${BASH_SOURCE[2]##*-}") \
      "$@" | jq -S .
    gen_state
  } | merge_map \
    | jq --argfile tfvars <(hcltool "$tmp_tfvars" | jq 'to_entries | map(.value |= { default: . }) | from_entries') '.variable |= (.+$tfvars)' > terraform.tf.json.1
  mv terraform.tf.json.1 terraform.tf.json
}

_main "$@"
