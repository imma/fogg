#!/usr/bin/env bash

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function gen_state {
  jq \
    --arg remote_bucket "$rb" \
    --arg remote_path "$rp" \
    --arg remote_region "$rr" \
    --arg provider_region "$provider_region" \
    -n -r '
      { 
        provider:
        { 
          aws: 
          { 
            region: "\($provider_region)" 
          },
          digitalocean: {},
          packet: {}
        },
        terraform: 
        { 
          backend: 
          { 
            s3: 
            { 
              bucket: "\($remote_bucket)", 
              key: "\($remote_path)", 
              dynamodb_table: "terraform_state_lock", 
              region: "\($remote_region)" 
            } 
          } 
        }
      }'
}

function gen {
  local nm_module="$1"; shift
  local nm_block="_fogg_tf_home"

  (
    (
      hcltool "${!nm_block}/fogg-${nm_module}/.wrapper.tf"
      hcltool "${!nm_block}/fogg-${nm_module}/variables.tf" \
        | jq 'reduce (.variable | to_entries)[] as $ele ({}; .[$ele.key] = ($ele.value.default 
                | if (. | type) == "array" then 
                    [ "${var.\($ele.key)}" ] 
                  else 
                    "${var.\($ele.key)}" 
                  end
                ))' \
        | jq --arg m "$nm_module" '{ module: { "\($m)": . } }'
    ) | merge_map

    hcltool "${!nm_block}/fogg-${nm_module}/variables.tf" \
      | jq --arg tfmod "$nm_module" '
          {
            variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
            output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
          }'

    if [[ -f "variables.tf" ]]; then
      hcltool "variables.tf" \
        | jq --arg service "$(fogg name | cut -d/ -f2-4  | tr / -)" '
            .output//{} | to_entries | map(select(.key | endswith("__"))) |
            if (. | length) > 0 then 
              { resource: { aws_ssm_parameter: (reduce .[] as $ele ({}; .[$ele.key | sub("__$"; "")] = {name: ($ele.key | sub("__$"; "") | "\($service).\(.)"), type: "String", value: $ele.value.value, overwrite: true})) } } 
            else
              { }
            end'
    fi
  ) | jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  local tmp_config="$(mktemp -t XXXXXX)"

  trap "$(printf 'rm -f %q %q %q' "$tmp_config")" EXIT

  fogg config > "$tmp_config"
  cat "$tmp_config" 1>&2

  local rp="$(cat .fogg-name-default | perl -pe 's{/}{_}g')/terraform.tfstate"
  local rb="$(jq -r '.remote_bucket' "$tmp_config")"
  local rr="$(jq -r '.remote_region' "$tmp_config")"

  local provider_region="$(jq -r '.region' "$tmp_config")"

  local nm_module="$1"; shift
  shift # org
  { 
    gen "${nm_module}"
    gen_state
  } | merge_map | jq \
        --argfile config <(hcltool "$tmp_config" | jq 'to_entries | map(.value |= { default: . }) | from_entries') \
        --argfile env <(cat "$tmp_config" | jq --arg rp "$rp" --arg rb "$rb" --arg rr "$rr" '{remote_path: $rp, remote_bucket: $rb, remote_region: $rr} * . | reduce to_entries[] as $kv ({}; .[$kv.key] = { default: $kv.value })') \
          '.variable |= . + ($config * $env)' | jq -S . > terraform.tf.json.1
  mv terraform.tf.json.1 terraform.tf.json
}

_main "$@"
