#!/usr/bin/env bash

function use_module {
  local nm_module="$1"; shift
  hcltool "$shome/module/${nm_module}/variables.tf" \
    | jq --arg tfmod "$nm_module" '{
          variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
          output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
        }'
}

function gen_state {
  local remote_bucket="$(jq -r '.variable.remote_bucket.default' terraform.tf.json)"
  local remote_path="$(jq -r '.variable.remote_path.default' terraform.tf.json)"
  local remote_region="$(jq -r '.variable.remote_region.default' terraform.tf.json)"
  local provider_region="$(jq -r '.variable.region.default' terraform.tf.json)"
  if [[ -z "$provider_region" ]]; then
    provider_region="$remote_region"
  fi

	jq \
		--arg remote_bucket "$remote_bucket" \
		--arg remote_path "$remote_path" \
		--arg remote_region "$remote_region" \
		--arg provider_region "$provider_region" \
    -n -r '{ 
        provider:
        { aws: { region: "\($provider_region)" },
          digitalocean: {}
        },
        terraform: 
        { backend: 
          { s3: 
            { bucket: "\($remote_bucket)", 
              key: "\($remote_path)", 
              lock_table: "terraform_state_lock", 
              region: "\($remote_region)" 
            } 
          } 
        }
      }'
}

function gen_org { 
  local nm_module="$1"; shift
  gen_xxx "$nm_module"
}

function gen_env { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_peering_net_stag_prod { 
  local nm_module="$1"; shift
  shift
  gen_xxx "$nm_module"
}

function gen_app {
  local nm_module="$1"; shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_service {
  local nm_module="$1"; shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_instance { 
  local nm_module="$1"; shift
  shift
  shift
  shift
  shift
  gen_xxx "$nm_module"
}

function gen_xxx {
  local nm_module="$1"; shift
  (
    hcltool "$shome/common/${nm_module}.tf" 
    hcltool "$shome/module/${nm_module}/variables.tf" | jq 'reduce (.variable | to_entries)[] as $ele ({}; .[$ele.key] = ($ele.value.default | if (. | type) == "array" then [ "${var.\($ele.key)}" ] else "${var.\($ele.key)}" end))' | jq --arg m "$nm_module" '{ module: { "\($m)": . } }'
  ) | merge_map
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  local id_tfvars="$(pwd)"
  id_tfvars="org--$(echo "${id_tfvars#*/org/}" | perl -pe 's{/}{--}g')/terraform.tfvars"

  { gen \
      <("gen_${BASH_SOURCE[2]##*-}" "${BASH_SOURCE[2]##*-}" "$@") \
      <(use_module "${BASH_SOURCE[2]##*-}") \
      "$@" | jq -S .
    gen_state
  } | merge_map \
    | jq --argfile tfvars <(hcltool <(credstash get "$id_tfvars") | jq 'to_entries | map(.value |= { default: . }) | from_entries') '.variable |= (.+$tfvars)' > terraform.tf.json.1
  mv terraform.tf.json.1 terraform.tf.json
}

_main "$@"
